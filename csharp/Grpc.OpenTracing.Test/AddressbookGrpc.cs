// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Tutorial {
  public static partial class Phone
  {
    static readonly string __ServiceName = "tutorial.Phone";

    static readonly grpc::Marshaller<global::Tutorial.Person> __Marshaller_Person = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Person.Parser.ParseFrom);

    static readonly grpc::Method<global::Tutorial.Person, global::Tutorial.Person> __Method_GetName = new grpc::Method<global::Tutorial.Person, global::Tutorial.Person>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetName",
        __Marshaller_Person,
        __Marshaller_Person);

    static readonly grpc::Method<global::Tutorial.Person, global::Tutorial.Person> __Method_GetNameRequestStream = new grpc::Method<global::Tutorial.Person, global::Tutorial.Person>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "GetNameRequestStream",
        __Marshaller_Person,
        __Marshaller_Person);

    static readonly grpc::Method<global::Tutorial.Person, global::Tutorial.Person> __Method_GetNameResponseStream = new grpc::Method<global::Tutorial.Person, global::Tutorial.Person>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetNameResponseStream",
        __Marshaller_Person,
        __Marshaller_Person);

    static readonly grpc::Method<global::Tutorial.Person, global::Tutorial.Person> __Method_GetNameBiDiStream = new grpc::Method<global::Tutorial.Person, global::Tutorial.Person>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "GetNameBiDiStream",
        __Marshaller_Person,
        __Marshaller_Person);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tutorial.AddressbookReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Phone</summary>
    public abstract partial class PhoneBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Person> GetName(global::Tutorial.Person request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Person> GetNameRequestStream(grpc::IAsyncStreamReader<global::Tutorial.Person> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetNameResponseStream(global::Tutorial.Person request, grpc::IServerStreamWriter<global::Tutorial.Person> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetNameBiDiStream(grpc::IAsyncStreamReader<global::Tutorial.Person> requestStream, grpc::IServerStreamWriter<global::Tutorial.Person> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Phone</summary>
    public partial class PhoneClient : grpc::ClientBase<PhoneClient>
    {
      /// <summary>Creates a new client for Phone</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PhoneClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Phone that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PhoneClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PhoneClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PhoneClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tutorial.Person GetName(global::Tutorial.Person request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tutorial.Person GetName(global::Tutorial.Person request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Person> GetNameAsync(global::Tutorial.Person request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Person> GetNameAsync(global::Tutorial.Person request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetName, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Tutorial.Person, global::Tutorial.Person> GetNameRequestStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNameRequestStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Tutorial.Person, global::Tutorial.Person> GetNameRequestStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_GetNameRequestStream, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Tutorial.Person> GetNameResponseStream(global::Tutorial.Person request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNameResponseStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Tutorial.Person> GetNameResponseStream(global::Tutorial.Person request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetNameResponseStream, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Tutorial.Person, global::Tutorial.Person> GetNameBiDiStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNameBiDiStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Tutorial.Person, global::Tutorial.Person> GetNameBiDiStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_GetNameBiDiStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PhoneClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PhoneClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PhoneBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetName, serviceImpl.GetName)
          .AddMethod(__Method_GetNameRequestStream, serviceImpl.GetNameRequestStream)
          .AddMethod(__Method_GetNameResponseStream, serviceImpl.GetNameResponseStream)
          .AddMethod(__Method_GetNameBiDiStream, serviceImpl.GetNameBiDiStream).Build();
    }

  }
  public static partial class PhoneRelay
  {
    static readonly string __ServiceName = "tutorial.PhoneRelay";

    static readonly grpc::Marshaller<global::Tutorial.Person> __Marshaller_Person = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Person.Parser.ParseFrom);

    static readonly grpc::Method<global::Tutorial.Person, global::Tutorial.Person> __Method_GetName = new grpc::Method<global::Tutorial.Person, global::Tutorial.Person>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetName",
        __Marshaller_Person,
        __Marshaller_Person);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tutorial.AddressbookReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of PhoneRelay</summary>
    public abstract partial class PhoneRelayBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Person> GetName(global::Tutorial.Person request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PhoneRelay</summary>
    public partial class PhoneRelayClient : grpc::ClientBase<PhoneRelayClient>
    {
      /// <summary>Creates a new client for PhoneRelay</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PhoneRelayClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PhoneRelay that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PhoneRelayClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PhoneRelayClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PhoneRelayClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Tutorial.Person GetName(global::Tutorial.Person request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tutorial.Person GetName(global::Tutorial.Person request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Person> GetNameAsync(global::Tutorial.Person request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Person> GetNameAsync(global::Tutorial.Person request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetName, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PhoneRelayClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PhoneRelayClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PhoneRelayBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetName, serviceImpl.GetName).Build();
    }

  }
}
#endregion
